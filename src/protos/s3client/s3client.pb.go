// Code generated by protoc-gen-go. DO NOT EDIT.
// source: s3client.proto

package s3client

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateBucketRequest struct {
	BucketName           string   `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateBucketRequest) Reset()         { *m = CreateBucketRequest{} }
func (m *CreateBucketRequest) String() string { return proto.CompactTextString(m) }
func (*CreateBucketRequest) ProtoMessage()    {}
func (*CreateBucketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_964d91ca75ca407b, []int{0}
}

func (m *CreateBucketRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateBucketRequest.Unmarshal(m, b)
}
func (m *CreateBucketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateBucketRequest.Marshal(b, m, deterministic)
}
func (m *CreateBucketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBucketRequest.Merge(m, src)
}
func (m *CreateBucketRequest) XXX_Size() int {
	return xxx_messageInfo_CreateBucketRequest.Size(m)
}
func (m *CreateBucketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBucketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBucketRequest proto.InternalMessageInfo

func (m *CreateBucketRequest) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

type PutObjectRequest struct {
	ObjectName           string            `protobuf:"bytes,1,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	BucketName           string            `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	XAmzMeta             map[string]string `protobuf:"bytes,3,rep,name=x_amz_meta,json=xAmzMeta,proto3" json:"x_amz_meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Content              string            `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PutObjectRequest) Reset()         { *m = PutObjectRequest{} }
func (m *PutObjectRequest) String() string { return proto.CompactTextString(m) }
func (*PutObjectRequest) ProtoMessage()    {}
func (*PutObjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_964d91ca75ca407b, []int{1}
}

func (m *PutObjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutObjectRequest.Unmarshal(m, b)
}
func (m *PutObjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutObjectRequest.Marshal(b, m, deterministic)
}
func (m *PutObjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutObjectRequest.Merge(m, src)
}
func (m *PutObjectRequest) XXX_Size() int {
	return xxx_messageInfo_PutObjectRequest.Size(m)
}
func (m *PutObjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PutObjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PutObjectRequest proto.InternalMessageInfo

func (m *PutObjectRequest) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

func (m *PutObjectRequest) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *PutObjectRequest) GetXAmzMeta() map[string]string {
	if m != nil {
		return m.XAmzMeta
	}
	return nil
}

func (m *PutObjectRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type UpdateTagsRequest struct {
	ObjectName           string            `protobuf:"bytes,1,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	BucketName           string            `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	XAmzMeta             map[string]string `protobuf:"bytes,3,rep,name=x_amz_meta,json=xAmzMeta,proto3" json:"x_amz_meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateTagsRequest) Reset()         { *m = UpdateTagsRequest{} }
func (m *UpdateTagsRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateTagsRequest) ProtoMessage()    {}
func (*UpdateTagsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_964d91ca75ca407b, []int{2}
}

func (m *UpdateTagsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateTagsRequest.Unmarshal(m, b)
}
func (m *UpdateTagsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateTagsRequest.Marshal(b, m, deterministic)
}
func (m *UpdateTagsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTagsRequest.Merge(m, src)
}
func (m *UpdateTagsRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateTagsRequest.Size(m)
}
func (m *UpdateTagsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTagsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTagsRequest proto.InternalMessageInfo

func (m *UpdateTagsRequest) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

func (m *UpdateTagsRequest) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *UpdateTagsRequest) GetXAmzMeta() map[string]string {
	if m != nil {
		return m.XAmzMeta
	}
	return nil
}

type Reply struct {
	Reply                int32    `protobuf:"varint,1,opt,name=reply,proto3" json:"reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_964d91ca75ca407b, []int{3}
}

func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetReply() int32 {
	if m != nil {
		return m.Reply
	}
	return 0
}

func init() {
	proto.RegisterType((*CreateBucketRequest)(nil), "s3client.CreateBucketRequest")
	proto.RegisterType((*PutObjectRequest)(nil), "s3client.PutObjectRequest")
	proto.RegisterMapType((map[string]string)(nil), "s3client.PutObjectRequest.XAmzMetaEntry")
	proto.RegisterType((*UpdateTagsRequest)(nil), "s3client.UpdateTagsRequest")
	proto.RegisterMapType((map[string]string)(nil), "s3client.UpdateTagsRequest.XAmzMetaEntry")
	proto.RegisterType((*Reply)(nil), "s3client.Reply")
}

func init() { proto.RegisterFile("s3client.proto", fileDescriptor_964d91ca75ca407b) }

var fileDescriptor_964d91ca75ca407b = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xcd, 0x4e, 0xf2, 0x40,
	0x14, 0xfd, 0x0a, 0x1f, 0x0a, 0x17, 0x7f, 0x70, 0x74, 0xd1, 0x60, 0x88, 0xa4, 0x2b, 0xdc, 0xb4,
	0x11, 0x12, 0x63, 0xd0, 0x85, 0x62, 0xd4, 0x95, 0x3f, 0xa9, 0x9a, 0x18, 0x37, 0x64, 0x5a, 0x6e,
	0x10, 0xe9, 0x0f, 0x76, 0xa6, 0x04, 0x78, 0x3a, 0xdf, 0xc3, 0xc7, 0xf0, 0x05, 0x4c, 0xa7, 0x94,
	0x42, 0x2d, 0x6e, 0x74, 0x77, 0xcf, 0x69, 0xcf, 0xbd, 0xe7, 0xcc, 0xdc, 0x81, 0x0d, 0xd6, 0x30,
	0xad, 0x1e, 0x3a, 0x5c, 0x1d, 0x78, 0x2e, 0x77, 0x49, 0x3e, 0xc2, 0xca, 0x21, 0x6c, 0x9f, 0x7b,
	0x48, 0x39, 0xb6, 0x7c, 0xb3, 0x8f, 0x5c, 0xc7, 0x37, 0x1f, 0x19, 0x27, 0x7b, 0x50, 0x34, 0x04,
	0xd1, 0x76, 0xa8, 0x8d, 0xb2, 0x54, 0x95, 0x6a, 0x05, 0x1d, 0x42, 0xea, 0x86, 0xda, 0xa8, 0x7c,
	0x4a, 0x50, 0xba, 0xf3, 0xf9, 0xad, 0xf1, 0x8a, 0xe6, 0xbc, 0xca, 0x15, 0xc4, 0x82, 0x2a, 0xa4,
	0x02, 0x55, 0xb2, 0x6d, 0x26, 0xd9, 0x96, 0x5c, 0x02, 0x8c, 0xda, 0xd4, 0x9e, 0xb4, 0x6d, 0xe4,
	0x54, 0xce, 0x56, 0xb3, 0xb5, 0x62, 0xbd, 0xa6, 0xce, 0xdc, 0x27, 0x27, 0xaa, 0x4f, 0x67, 0xf6,
	0xe4, 0x1a, 0x39, 0xbd, 0x70, 0xb8, 0x37, 0xd6, 0xf3, 0xa3, 0x29, 0x24, 0x32, 0xac, 0x9a, 0xae,
	0xc3, 0xd1, 0xe1, 0xf2, 0x7f, 0x31, 0x24, 0x82, 0xe5, 0x63, 0x58, 0x5f, 0x10, 0x91, 0x12, 0x64,
	0xfb, 0x38, 0x9e, 0x9a, 0x0d, 0x4a, 0xb2, 0x03, 0xb9, 0x21, 0xb5, 0xfc, 0xc8, 0x5f, 0x08, 0x9a,
	0x99, 0x23, 0x49, 0xf9, 0x90, 0x60, 0xeb, 0x71, 0xd0, 0xa1, 0x1c, 0x1f, 0x68, 0x97, 0xfd, 0x5d,
	0xec, 0xab, 0x94, 0xd8, 0xfb, 0x71, 0xec, 0x6f, 0x23, 0x97, 0xe5, 0xfe, 0x5d, 0xba, 0x0a, 0xe4,
	0x74, 0x1c, 0x58, 0xe2, 0x17, 0x2f, 0x28, 0x84, 0x2c, 0xa7, 0x87, 0xa0, 0xfe, 0x2e, 0x41, 0xe6,
	0xbe, 0x41, 0x4e, 0x61, 0x6d, 0x7e, 0x63, 0x48, 0x25, 0xf6, 0x99, 0xb2, 0x49, 0xe5, 0xcd, 0xf8,
	0xb3, 0x68, 0xae, 0xfc, 0x23, 0x4d, 0x28, 0xcc, 0x2e, 0x92, 0x94, 0x97, 0xdf, 0x6e, 0x9a, 0xf6,
	0x04, 0x20, 0x3e, 0x0d, 0xb2, 0xfb, 0xc3, 0x19, 0xa5, 0xa8, 0x5b, 0x07, 0xcf, 0x5a, 0xb7, 0xc7,
	0x5f, 0x7c, 0x43, 0x35, 0x5d, 0x5b, 0xeb, 0x0c, 0x29, 0xeb, 0x59, 0x94, 0x69, 0xc1, 0xa3, 0x40,
	0x9f, 0x69, 0xcc, 0x33, 0x45, 0xed, 0x32, 0x2d, 0x92, 0x1a, 0x2b, 0x82, 0x68, 0x7c, 0x05, 0x00,
	0x00, 0xff, 0xff, 0xcf, 0x2f, 0x1c, 0xfa, 0x43, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// S3Client is the client API for S3 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type S3Client interface {
	CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*Reply, error)
	PutObject(ctx context.Context, in *PutObjectRequest, opts ...grpc.CallOption) (*Reply, error)
	UpdateTags(ctx context.Context, in *UpdateTagsRequest, opts ...grpc.CallOption) (*Reply, error)
}

type s3Client struct {
	cc *grpc.ClientConn
}

func NewS3Client(cc *grpc.ClientConn) S3Client {
	return &s3Client{cc}
}

func (c *s3Client) CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/s3client.S3/CreateBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s3Client) PutObject(ctx context.Context, in *PutObjectRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/s3client.S3/PutObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s3Client) UpdateTags(ctx context.Context, in *UpdateTagsRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/s3client.S3/UpdateTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// S3Server is the server API for S3 service.
type S3Server interface {
	CreateBucket(context.Context, *CreateBucketRequest) (*Reply, error)
	PutObject(context.Context, *PutObjectRequest) (*Reply, error)
	UpdateTags(context.Context, *UpdateTagsRequest) (*Reply, error)
}

func RegisterS3Server(s *grpc.Server, srv S3Server) {
	s.RegisterService(&_S3_serviceDesc, srv)
}

func _S3_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3Server).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/s3client.S3/CreateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3Server).CreateBucket(ctx, req.(*CreateBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _S3_PutObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3Server).PutObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/s3client.S3/PutObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3Server).PutObject(ctx, req.(*PutObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _S3_UpdateTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3Server).UpdateTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/s3client.S3/UpdateTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3Server).UpdateTags(ctx, req.(*UpdateTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _S3_serviceDesc = grpc.ServiceDesc{
	ServiceName: "s3client.S3",
	HandlerType: (*S3Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBucket",
			Handler:    _S3_CreateBucket_Handler,
		},
		{
			MethodName: "PutObject",
			Handler:    _S3_PutObject_Handler,
		},
		{
			MethodName: "UpdateTags",
			Handler:    _S3_UpdateTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "s3client.proto",
}
